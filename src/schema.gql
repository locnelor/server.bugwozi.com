# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Test {
  now: Float!
  msg: String!
}

type ProfileEntity {
  email: String!
  qq: String!
  phone: String!
  id: Float!
  userId: Float!
}

type UserOnGroupEntity {
  userId: Int!
  user: UserEntity
  groupId: Int!
  group: GroupEntity
  isAdmin: Boolean!
  isBan: Boolean!
  hash_key: String!
}

type GroupEntity {
  id: Int!
  createAt: DateTime!
  updateAt: DateTime!
  name: String!
  description: String
  userOnGroup: UserOnGroupEntity!
  leader: UserEntity!
  userId: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserEntity {
  id: Int!
  createAt: DateTime!
  updateAt: DateTime!
  address: String!
  group: [GroupEntity!]
  name: String
  token: String
  role: Float!
  profile: ProfileEntity
}

type TestEntity {
  id: Int!
  random: Float!
  ranStr: String!
}

type PostEntity {
  id: Int!
  createAt: DateTime!
  updateAt: DateTime!
  userId: Int!
  user: UserEntity!
  title: String!
  hash_key: String!
  subTitle: String!
  context: String
}

type KGNBEntity {
  id: Int!
  createAt: DateTime!
  updateAt: DateTime!
  context: String!
  commit: String
}

type Query {
  getInfo: UserEntity!
  test: Test!
  userList: [UserEntity!]!
  viewer: UserEntity!
  getTestQuery: TestEntity!
  getErrorQuery: TestEntity!
  accountPower: TestEntity!
  commitPower: TestEntity!
  powerSize: TestEntity!
  getRandomKGNB: [KGNBEntity!]!
  getAllKGNB: [KGNBEntity!]!
  getMyGroup: [GroupEntity!]!
  getGroupByUser(id: Float!): [GroupEntity!]!
}

type Mutation {
  loginAddressPassword(address: String!, password: String!): UserEntity!
  getTestMutation(ranStrLen: Float!, num: Float!, count: Float!): [TestEntity!]!
  getErrorMutation: TestEntity!
  publishPost(title: String!, subTitle: String!, context: String!, tags: String!): PostEntity!
  insertKGNB(context: String!, commit: String): KGNBEntity!
  updateKGNB(id: Float!, context: String!, commit: String): KGNBEntity!
  createGroup(name: String!, description: String): GroupEntity!
  updateGroup(id: Float!, name: String!, description: String): GroupEntity!
  updateOtherGroup(id: Float!, name: String!, description: String): GroupEntity!
  deleteGroup(id: Float!): GroupEntity!
  deleteOtherGroup(id: Float!): GroupEntity!
}