// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  createAt    DateTime      @default(now())
  updateAt    DateTime      @default(now()) @updatedAt
  role        Int           @default(0)
  address     String?
  profile     Profile?
  name        String?
  article     Article[]
  comment     Comment[]
  dynamic     Dynamic[]
  userOnGroup UserOnGroup[]
  group       Group[]
  Message     Message[]
}

model UserOnGroup {
  user     User    @relation(fields: [userId], references: [id])
  group    Group   @relation(fields: [groupId], references: [id])
  userId   Int
  groupId  Int
  isAdmin  Boolean @default(false)
  isBan    Boolean @default(false)
  hash_key String  @unique

  @@id([userId, groupId])
}

model Group {
  id          Int           @id @default(autoincrement())
  createAt    DateTime      @default(now())
  updateAt    DateTime      @default(now()) @updatedAt
  name        String
  description String?
  userOnGroup UserOnGroup[]
  leader      User          @relation(fields: [userId], references: [id])
  message     Message[]
  userId      Int
}

model Message {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  Int
  context  String   @db.Text
}

model Dynamic {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updateAt  DateTime @default(now()) @updatedAt
  priv      Boolean  @default(true)
  title     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  view      Int      @default(0)
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
}

model KGNB {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt
  context  String   @db.Text
  commit   String?  @db.Text
}

model Profile {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
  password String
  email    String? @unique
  qq       String? @unique
  phone    String? @unique
}

model Article {
  id           Int            @id @default(autoincrement())
  createAt     DateTime       @default(now())
  updateAt     DateTime       @default(now()) @updatedAt
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  articleOntag ArticleOntag[]
}

model ArticleOntag {
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int

  @@id([tagId, articleId])
}

model Tag {
  id           Int            @id @default(autoincrement())
  name         String
  articleOntag ArticleOntag[]
}

model Comment {
  id       Int       @id @default(autoincrement())
  createAt DateTime  @default(now())
  updateAt DateTime  @default(now()) @updatedAt
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
  dynamic  Dynamic[]
}
